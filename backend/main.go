/*
 * Podcast Recommender app
 *
 * This is the API for the podcast recommender app. The API used to get all data is Listen Notes (https://www.listennotes.com/api/)
 *
 * API version: 1.0.0
 * Contact: joren.sjongers@icloud.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"database/sql"
	"log"
	"net/http"
	"os"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    sw "github.com/myname/myrepo/go"
	//
	_ "github.com/mattn/go-sqlite3"
	sw "github.com/robinspiltijns/recommender_app/backend/go"
)

const dbFileName = "logging-database.db"

func main() {

	os.Remove(dbFileName)

	log.Println("Creating" + dbFileName + "...")
	file, err := os.Create(dbFileName) // Create SQLite file
	if err != nil {
		log.Fatal(err.Error())
	}
	file.Close()
	log.Println("database file created")

	db, err := sql.Open("sqlite3", "./"+dbFileName)
	if err != nil {
		log.Fatal(err.Error())
	}
	defer db.Close()

	createTable(db)

	log.Printf("Server started")

	router := sw.NewRouter()

	log.Fatal(http.ListenAndServe(":8080", router))
}

func createTable(db *sql.DB) {
	createTableQuery := `CREATE TABLE timing (
		user_id TEXT PRIMARY KEY NOT NULL,
		app_version TEXT,		
		start_time TEXT,
		stop_time TEXT
	  )`

	log.Println("Create timing table...")
	if _, err := db.Exec(createTableQuery); err != nil {
		log.Fatal(err.Error())
	}

	log.Println("timing table created")
}
